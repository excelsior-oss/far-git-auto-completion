.Language=Russian,Russian (Русский)
.PluginContents=GitAutocomplete
.Options CtrlStartPosChar=^<wrap>

@Contents
$ #Git Автодополнение#
    Этот плагин дополняет имена Git веток и тегов в командной строке.

    Предположим у вас есть ветки:

      #master#
      #feature/inline-suggestions#
      #feature/suggestions-dialog#
      #origin/fix/help-typo#

    Плагин дополнит:

      #m# -> #master#
      #fe# -> #feature/#

    И даже так (пунктуация и прописные буквы играют роль якорей):

      #f/h# -> #fix/help-typo#

    Если не существует однозначного дополнения (например, #feature/#), то плагин показывает диалог со списком всех возможных ссылок. Заметьте, что вы можете легко фильтровать этот список с помощью ~стандартной команды~@:MenuCmd@ #Ctrl-Alt-F#.


    См. также: ~Настройка плагина~@Config@


@Config
$ #Настройка Git Автодополнение#
    Присутствуют следующие опции:

      #Показывать диалог#                 ^<wrap>Показывать диалог со списком всех возможных ссылок.
      #со ссылками#                       Иначе они подставляются прямо в командной строке.

      #Дополнять имена удаленных ссылок#  ^<wrap>Дополнять имена удаленных ссылок (например, "origin/fix/help-typo")
      #по их короткому имени#             по их короткому имени без имени удаленного сервера (например, "fix/help-typo").

    Эти опции можно переопределять для одиночного запуска плагина с помощью функции #Plugin.Call# в ~макрокоманде~@:KeyMacroSetting@:

      #Plugin.Call("89DF1D5B-F5BB-415B-993D-D34C5FFE049F", "Опция 1", "Опция 2", ...)#

    Имена опций (включенный/выключенный вариант):

      #SuggestionsDialog# / #InlineSuggestions#
      #ShortRemoteName# / #FullRemoteName#

    Также имеется удобная опция для итерации ссылок в командной строке в обратном порядке: #ShowPreviousInlineSuggestion#.


    См. также: ~Содержание~@Contents@
